// @name is used to import SUTRA files generated by running PEST
unit SutraImportUnit;

interface

uses
  Vcl.Forms, Winapi.Windows, System.UITypes, System.Classes,
  frmImportShapefileUnit, System.SysUtils, Vcl.Dialogs;

type
  TImportSutra14B = class(TUndoImportShapefile)
  protected
    function Description: string; override;
  end;

procedure ImportDataSet14B(const FileName: string);

implementation

uses
  System.IOUtils, frmGoPhastUnit, PhastModelUnit, GoPhastTypes,
  ModelMuseUtilities, ScreenObjectUnit, SutraMeshUnit, UndoItems, DataSetUnit,
  ValueArrayStorageUnit, RbwParser, frmProgressUnit, GIS_Functions, FastGEO;

resourcestring
  StrObject = 'Object ';

procedure MakeNewDataSet(NewDataSets: TList; Suffix, Classification: string;
   FileName: string; EvaluatedAt: TEvaluatedAt; out DataArray: TDataArray);
var
  NewDataSetName: string;
  ChildIndex: Integer;
  ChildModel: TChildModel;
  ChildDataSet: TDataArray;
begin
  NewDataSetName := ExtractFileName(FileName);
  NewDataSetName := ChangeFileExt(NewDataSetName, '');
  NewDataSetName := GenerateNewName(NewDataSetName + Suffix);

  DataArray := frmGoPhast.PhastModel.DataArrayManager.CreateNewDataArray(TDataArray,
    NewDataSetName, '0.', NewDataSetName, [], rdtDouble,
    EvaluatedAt, dsoTop, Classification);

  DataArray.OnDataSetUsed := frmGoPhast.PhastModel.ModelResultsRequired;
  DataArray.Units := '';

  DataArray.TwoDInterpolator := nil;

  frmGoPhast.PhastModel.UpdateDataArrayDimensions(DataArray);

  if frmGoPhast.PhastModel.LgrUsed then
  begin
    for ChildIndex := 0 to frmGoPhast.PhastModel.ChildModels.Count - 1 do
    begin
      ChildModel := frmGoPhast.PhastModel.ChildModels[ChildIndex].ChildModel;
      ChildDataSet := ChildModel.DataArrayManager.GetDataSetByName(DataArray.Name);
      ChildModel.UpdateDataArrayDimensions(ChildDataSet);
    end;
  end;

  NewDataSets.add(DataArray);
end;


procedure ImportDataSet14B(const FileName: string);
var
  TextStream: TStreamReader;
  ALine: string;
  Splitter: TStringList;
  LocalModel: TPhastModel;
  X: double;
  Y: double;
  Z: double;
  Por: double;
  Undo: TImportSutra14B;
  Undo2: TCustomUndo;
  Mesh: TSutraMesh3D;
  Porosity: TDataArray;
  Thickness: TDataArray;
  PorosityValueArrayItem: TValueArrayItem;
  ThicknessValueArrayItem: TValueArrayItem;
  ThicknessValues: TValueArrayStorage;
  AScreenObject: TScreenObject;
  ScreenObjectList: TList;
  Position: integer;
  NewDataSets: TList;
  PointCount: Integer;
begin
  Assert(TFile.Exists(FileName));
  LocalModel := frmGoPhast.PhastModel;
  Assert(LocalModel.ModelSelection in SutraSelection);
  Mesh := LocalModel.SutraMesh;

  frmGoPhast.PhastModel.BeginScreenObjectUpdate;
  frmGoPhast.CanDraw := False;
  try
    ScreenObjectList := TList.Create;
    try
      ScreenObjectList.Capacity := 1;
      AScreenObject := TScreenObject.CreateWithViewDirection(
        LocalModel, vdTop, Undo2, False);
      NewDataSets := TList.Create;
      try
        ScreenObjectList.Add(AScreenObject);
        AScreenObject.SetValuesOfIntersectedCells := True;
        AScreenObject.EvaluatedAt := eaNodes;
        if Mesh.MeshType = mt3D then
        begin
          AScreenObject.ElevationCount := ecOne;
          AScreenObject.Capacity := Mesh.Mesh2D.Nodes.Count
            * (Mesh.LayerCount + 1);
          AScreenObject.ElevationFormula :=
            rsObjectImportedValuesR
            + '("' + StrImportedElevations + '")';
        end
        else
        begin
          AScreenObject.ElevationCount := ecZero;
          AScreenObject.Capacity := Mesh.Mesh2D.Nodes.Count;
        end;

        try
          MakeNewDataSet(NewDataSets, '_Imported_Porosity',
            strDefaultClassification + '|' + 'imported from SUTRA Data Set 14B file',
            FileName, eaNodes, Porosity);

          Position := AScreenObject.AddDataSet(Porosity);
          PorosityValueArrayItem := AScreenObject.ImportedValues.Add;
          PorosityValueArrayItem.Name :=  Porosity.Name;
          PorosityValueArrayItem.Values.DataType := rdtDouble;
          AScreenObject.DataSetFormulas[Position]
            := rsObjectImportedValuesR + '("' + PorosityValueArrayItem.Name + '")';


          if Mesh.MeshType <> mt3D then
          begin
            MakeNewDataSet(NewDataSets, '_Imported_Thickness',
              strDefaultClassification + '|' + 'imported from SUTRA Data Set 14B file',
              FileName, eaNodes, Thickness);

            Position := AScreenObject.AddDataSet(Thickness);
            ThicknessValueArrayItem := AScreenObject.ImportedValues.Add;
            ThicknessValueArrayItem.Name :=  Thickness.Name;
            ThicknessValueArrayItem.Values.DataType := rdtDouble;
  //                          ThicknessValueArrayItem.Values.Count := EntityCount;
            AScreenObject.DataSetFormulas[Position]
              := rsObjectImportedValuesR + '("' + ThicknessValueArrayItem.Name + '")';
            ThicknessValues := ThicknessValueArrayItem.Values;
          end
          else
          begin
            Thickness := nil;
            ThicknessValues := AScreenObject.ImportedSectionElevations;
          end;

          Splitter := TStringList.Create;
          TextStream := TFile.OpenText(FileName);
          try
            frmProgressMM.Caption := '';
            frmProgressMM.Prefix := StrObject;
            frmProgressMM.PopupParent := frmGoPhast;
            frmProgressMM.Show;
            frmProgressMM.pbProgress.Max := AScreenObject.Capacity;
            frmProgressMM.pbProgress.Position := 0;
            frmProgressMM.ProgressLabelCaption :=
              Format('0 out of %d.', [AScreenObject.Capacity]);
            PointCount := 0;
            while not TextStream.EndOfStream do
            begin
              ALine := TextStream.ReadLine;
              if (ALine = '') or (ALine[1] = '#') then
              begin
                Continue;
              end;
              Splitter.DelimitedText := ALine;
              Assert(Splitter.Count >= 6);
              X := FortranStrToFloat(Splitter[2]);
              Y := FortranStrToFloat(Splitter[3]);
              Z := FortranStrToFloat(Splitter[4]);
              Por := FortranStrToFloat(Splitter[5]);
              Inc(PointCount);

              AScreenObject.AddPoint(EquatePoint(X,Y), True);
              ThicknessValues.Add(Z);
              PorosityValueArrayItem.Values.Add(Por);


              frmProgressMM.ProgressLabelCaption :=
                Format('%0:d out of %1:d.', [PointCount, AScreenObject.Capacity]);
              frmProgressMM.StepIt;
              Application.ProcessMessages;
            end;
          finally
            TextStream.Free;
            Splitter.Free;
          end;
        except
          AScreenObject.Free;
          raise
        end;

        Undo := TImportSutra14B.Create;
        try
          frmGoPhast.PhastModel.AddFileToArchive(FileName);
          Undo.StoreNewScreenObjects(ScreenObjectList);
          Undo.StoreNewDataSets(NewDataSets);
          frmGoPhast.UndoStack.Submit(Undo);
        except
          Undo.Free;
          raise;
        end;
      finally
        NewDataSets.Free;
      end;
    finally
      frmProgressMM.Hide;
      ScreenObjectList.Free;
      frmGoPhast.CanDraw := True;
      frmGoPhast.PhastModel.EndScreenObjectUpdate;
    end;
  except on E: Exception do
    begin
      Beep;
      MessageDlg(E.message, mtError, [mbOK], 0);
    end;
  end;
end;

{ TImportSutra14B }

function TImportSutra14B.Description: string;
begin
  result := 'import SUTRA data set 14B generated by PEST';
end;

end.
