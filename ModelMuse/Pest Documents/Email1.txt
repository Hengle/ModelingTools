Hi
I would like to let you all know where things stand with adding support for PEST in ModelMuse.
First, I would like to thank all or you for responding to my questions from back in January and for your many thoughtful comments. If any of you or your colleagues wish to become beta testers for the updated version of ModelMuse when it becomes available, please let me know. I've recently completed some of my other priorities for this year and now intend to work intensively on supporting PEST. Here is what I am planning on doing.
I intend to address observations first. 
For MODFLOW prior to MODFLOW 6, I intend to allow observations to be defined in the Observation Process in the same way they were for MODFLOW-2005. However, there are some other output files that could also be used to define observations. For example, the HYDMOD, GAGE, and MNWI packages all produce output that could potentially be used for observations. It should be possible for ModelMuse to prepare appropriate PEST instruction files to extract simulated values from these other types of output files. 
In MODFLOW 6, the Observation Process was eliminated and replaced with the Observation Utility. It produces only time-series data in either text or binary files. PEST instruction files could be used to extract simulated values from the text files but not the binary files. In addition, the extracted data might need to be manipulated further by, for example, interpolating in space and time to the observation location or by other sorts of calculations. I have written a program that can do the sorts of manipulations that I think need to be done in a flexible manner. It can be compiled for Windows, Linux, and Mac operating systems using the open source Free Pascal compiler. 
SUTRA output data is in text files, so I plan to have ModelMuse generate PEST instruction files to extract values from them.
After addressing observations, I will work on defining parameters for MODFLOW and SUTRA. For MODFLOW prior to MODFLOW 6, parameters can already be defined but I intend to make some changes. First of all, ModelMuse allows multiple parameters of the same type to apply to the same cell. For example, two horizontal hydraulic conductivity parameters could apply to the same cell and the resulting hydraulic conductivity would be the sum of the two parameter values. At present, the user defines a separate zone array data set for each parameter. In the future, the zone arrays will be replaced by a single text data set for each data set in which the only allowed values will be the names of parameters. This will prevent more than one parameter of the same type from applying to more than one cell. Users will be able to switch to the previous method in which more than one parameter could apply to the same cell. If a user opens an existing ModelMuse file from before this change was made, the previous method will be used by default to ensure backwards compatibility. 
Within a zone in which a single parameter applies, the user will be able to define pilot points. If I understand the terminology correctly, the parameters as defined in ModelMuse will be "super-parameters" for PEST and PEST will have a separate parameter for each pilot point. The initial values of those pilot point parameters will be the super-parameter value. I need to read up on this whole subject so please excuse and mistakes or confusing statements in this explanation. 
Another change will be how parameters are used with boundary conditions. In the future, instead of selecting a parameter that applies to all the time periods defined by an object, you will select parameters that apply only to specific time periods in a model. For example, you might have separate parameters for summer and winter recharge rates. A faked illustration of how this might look in the Object Properties dialog box is shown below in which three different GHB parameters are used with the same object but at different times. Another change will be that there will be parameters for more types of properties of boundary conditions. For example, with GHB boundaries, in addition for a conductance parameter, the user will also be able to define parameters for the boundary head. 
When you ask people who know more about a subject that you do for advice, it is a good ideal to accept the advice you are given. So when both John Doherty and Mike Fienen said that users should be allowed to use both conductance and boundary head parameters at the same location and time, I decided to allow this. This was not the majority advice but I felt than others on this subject.
They way I intend to implement this is by allowing the user to display a dialog box in which the user can select from among the defined parameters that apply to the boundary condition being edited. 
Several people would like to be able to define conductance parameters by linking them to the hydraulic conductivity where the conductance applies. I'm going to try to figure out how to do that. It could get tricky.
ModelMuse will also need to create the PEST control file and address linear and nonlinear uncertainty analysis. I haven't done any planning with regard to those topics yet.