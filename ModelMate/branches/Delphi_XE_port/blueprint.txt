ModelMuse / ModelMate interaction

================================================================================

ModelMuse will be able to:

* Create MODFLOW input files required for GWF Process

* Create MODFLOW input files required for OBS Process

* Run MODFLOW

* Save all project data in a ModelMuse file (ModelMuse file types are *.gpt (text), *.gpb (binary), or *.gpx (xml)) 

* Use code from ModelMate to generate a ModelMate (*.mtc) file (which contains properties for a ModelMateClassesUnit.TProject object).  As a minimum, the following properties would be populated:

	Project name (TProject.ProjName)
	
	MODFLOW name file location (TProject.ModflowNameFile).
	
	Operating system command used to invoke MODFLOW, including full pathname for MODFLOW executable or batch file (TProject.MCLForward).

	Parameter definitions, including but not limited to: ParamName, StartValue (TProject.ParamSet).
	
	Observation definitions, including but not limited to: ObsName, ObsValue; it would be good to also support definition of Statistic and StatFlag.  Also include, if possible: GroupName (to differentiate among heads, head changes, and flows of various packages) (TProject.ObsSet).  
	
	If observation groups are to be supported: Observation group definitions (TProject.ObsGpSet), including but not limited to: GroupName, Statistic, StatFlag, PlotSymbol.  Alternatively, Statistic, StatFlag, and PlotSymbol could be defined for each observation in TProject.ObsSet.
	
	ModelMuse also could define the Output prefix (required on the UCODE_2005 command line) in the .mtc file.
	
	The following source code files of ModelMate would be needed/shared by ModelMuse in order to export a .mtc file:
		ModelMateUtilities.pas (unit ModelMateUtilities)
		GlobalData.pas (unit GlobalData)
		ModelMateClassesUnit.pas (unit ModelMateClassesUnit, where TProject is defined)
		UcodeUnit.pas (unit UcodeUnit)
		JupiterUnit.pas (unit JupiterUnit)
                DependentsUnit.pas (unit DependentsUnit)
		GlobalTypesUnit.pas (unit GlobalTypesUnit)
                Utilities.pas (unit Utilities)
		GlobalBasicData.pas (unit GlobalBasicData)
		
	In addition, for code used in exporting a .mtc file, see frmMainUnit.pas, procedures:
		TFormMain.actFileSaveAsExecute
		TFormMain.actFileSaveExecute.

* Store the location and date of the *.mtc file.

        Whenever ModelMuse needs to use the data that are stored in the *.mtc file, it will check whether the *.mtc file has been changed since it last checked.  If the *.mtc file has changed it will read the *.mtc file and use that data to update itself.  If new parameters have been added, it will add them.  If parameters have been deleted it will compile a list of the deleted parameters and ask if any of them have been renamed.  For parameters that have not been renamed, it will ask for confirmation that they should be deleted and, if confirmed, will delete them.  Observations will be handled similarly.
        
* Read a ModelMate *.mtc file for the purpose of obtaining updated parameter values        

================================================================================

ModelMate will be able to:

* Store project data in a *.mtc file, which is the native format for ModelMate.  This file includes all project settings and data such as parameter and observation definitions.

When the number of observations is large, I anticipate that there will be a need to avoid storing observation data in the *.mtc file.  To deal with this issue, it may be desirable to modify ModelMateClassesUnit.TProject (and, therefore, the *.mtc file) to include a list of file names (in a TStringList object) for file(s) containing Observation_Data input block(s) that would contain the actual observation data.  These files would not need to be read by ModelMate; they would be read by Ucode.  However, extraction instructions would need to be generated--this could be left to the user (by using a dialog form to be developed for the purpose).  Or, it may be good to provide an option to read observations from Modflow input (generating instructions in the process) and then save the data to a separate file, so that the data would not need to be stored in the *.mtc file.

* Define parameters (name and value) based on data imported from MODFLOW input files listed in name file.  Currently, only parameters listed in the PVAL file are imported; support for importing parameters listed in package input files is to be added.

* Define observations (name, value, group) based on data imported from MODFLOW input files listed in name file.  Observations may be read from HOB, CHOB, RVOB, DROB, and GBOB files.  A group is defined for each type of flow observation; observations defined in HOB are assigned to group "heads" or group "head_changes" depending on value of ITT.

* Import a *.mtc file generated by ModelMuse to define project name, name file location, operating system command used to invoke MODFLOW, parameter definitions, observation definitions, observation group definitions (if available).  File...Open does this now.  ModelMate also can open a *.mtc file specified as a command-line parameter.

* Facilitate definition of variables used by UCODE to control its operation.  Implemented in forms accessed by buttons labeled "More UCODE_2005 Settings" and "Parameter Estimation Settings".  Supported modes include: Forward, Sensitivity Analysis, and Parameter Estimation.

* Create UCODE input files:

	Main input file ("Create UCODE_2005 Input Files")
	
	Template files--implemented as of 4/7/08: template for MF2005 PVAL file generated when parameters are imported from MODFLOW-2005
	
	Instruction files--implemented as of 4/10/2008: instruction file(s) generated when observations are imported from MODFLOW-2005

* Save UCODE input file(s) ("Create UCODE_2005 Input Files")

* Run UCODE ("Run UCODE_2005")

* Import UCODE output files to obtain statistics and other output related to model fit, regression performance, ... etc.  Not yet implemented.

* Invoke GW_Chart to display calibration plots.  Once started, GW_Chart could be used to view such model output as hydrographs or water budgets.  Done.

================================================================================

Additional capabilities planned for ModelMate:

* Support for UCODE modes: Test Model Linearity, Prediction, Advanced Test Model Linearity, Nonlinear Uncertainty, Investigate Objective Function.

* Facilitate definition of prior information (similar to Linear_Prior_Information section of "Data for UCODE Main Input" form of MFI-2005) -- Done.

* Facilitate definition of predictions, implementation similar to observations -- Done.

* Facilitate definition of parallel processing setup -- Done as of 10/15/09.

* Populate runner directories -- Done as of 10/15/09.

* Document history of changes to project (either: (1) stored as a text file separate from the *.mtc file, or (2) implemented as a series of saved *.mtc files).  

* Support for constructing variance-covariance matrices for observation groups.
