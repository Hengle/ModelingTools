unit TestFootprintFileUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Classes, FootprintFileUnit, System.SysUtils;

type
  // Test methods for class TFootPrintFile

  TestTFootPrintFile = class(TTestCase)
  strict private
    FFootPrintFile: TFootPrintFile;
  private
    procedure LoadWrongVersion;
    procedure LoadWrongHeader;
    procedure LoadWrongNumberOfRows;
    procedure LoadWrongNumberOfColumns;
//    procedure LoadUnrecognizedTag;
//    procedure LoadMissingStartTag;
    procedure ReadBadArrayIndex;
//    procedure LoadMissingTerminator;
//    procedure LoadMissingVersion;
    procedure LoadConvertError;
    procedure LoadFootprintIllustration;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLoadFromFile;
    procedure TestSaveToFile;
    procedure TestWrongVersion;
    procedure TestWrongHeader;
    procedure TestWrongNumberOfRows;
    procedure TestWrongNumberOfColumns;
    procedure TestLoadFromFileBinary;
    procedure TestBadArrayDimenensions;
    procedure TestConvertError;
    procedure TestDepthRateIndexArray;
    procedure TestWithdrawalsArray;
    procedure TestReadAsciiResults;
    procedure TestReadTextRealArray;
    procedure TestReadBinaryRealArray;
    procedure TestReadTextIntArray;
    procedure TestReadBinaryIntArray;
  end;

implementation

uses
  System.IOUtils, FootPrintUtilities, FastGEO;

procedure TestTFootPrintFile.SetUp;
begin
  FFootPrintFile := TFootPrintFile.Create;
end;

procedure TestTFootPrintFile.TearDown;
begin
  FFootPrintFile.Free;
  FFootPrintFile := nil;
end;

procedure TestTFootPrintFile.TestBadArrayDimenensions;
begin
  CheckException(ReadBadArrayIndex, EFootPrintArrayError, 'Failed to detect bad Array Index');
end;

procedure TestTFootPrintFile.TestConvertError;
begin
  CheckException(LoadConvertError, EFootPrintConvertError, 'Failed to detect conversion error');
end;

procedure TestTFootPrintFile.TestDepthRateIndexArray;
var
  AnArray: TTwoDRealArray;
begin
  FFootPrintFile.NumberOfRows := 1;
  FFootPrintFile.NumberOfColumns := 1;
  FFootPrintFile.DepthRateIndex[0,0] := 1;
  AnArray := FFootPrintFile.DepthRateIndexArray;
  CheckEquals(1, Length(AnArray));
  CheckEquals(1, Length(AnArray[0]));
  CheckEquals(1, AnArray[0,0]);
  AnArray[0,0] := 2;
  CheckEquals(1, FFootPrintFile.DepthRateIndex[0,0]);
end;

procedure TestTFootPrintFile.TestLoadFromFile;
var
  FileName: string;
  ClosureCriterion: double;
  TestCriterion: double;
  RowIndex: Integer;
  index: Integer;
  ColIndex: Integer;
  Outline: TPolygon2D;
  ErrorMessage: string;
begin
//  FileName := 'C:\Colab\GWModelTools\Footprint\TestFiles\TestOpen.txt';
//  FileName := ExtractRelativePath(ParamStr(0), FileName);
  FileName := '..\..\..\TestFiles\TestOpen.txt';
  FFootPrintFile.LoadFromFile(FileName);
  // TODO: Validate method results
  CheckEquals(5, FFootPrintFile.NumberOfRows, 'wrong number of rows');
  CheckEquals(6, FFootPrintFile.NumberOfColumns, 'wrong number of rows');
  ClosureCriterion := FFootPrintFile.ClosureCriterion;
  TestCriterion := 0.001;
  CheckEquals(TestCriterion, ClosureCriterion, 'wrong closure criterion');
  CheckEquals(100000, FFootPrintFile.MaxIterations, 'wrong max iterations');
  CheckEquals(False, FFootPrintFile.InitialDistribution, 'wrong initial redistribution');
  CheckEquals(5, FFootPrintFile.RedistributionCriterion, 'wrong Redistribution Criterion');
  CheckEquals(45, FFootPrintFile.GridAngle, 'wrong grid angle');
  Outline := FFootPrintFile.Outline;
  CheckEquals(4, Length(Outline), 'wrong outline length');
  CheckEquals(0, Outline[0].x, 'wrong outline[0].x');
  CheckEquals(0, Outline[0].y, 'wrong outline[0].y');
  CheckEquals(0, Outline[1].x, 'wrong outline[1].x');
  CheckEquals(1, Outline[1].y, 'wrong outline[1].y');
  CheckEquals(1, Outline[2].x, 'wrong outline[2].x');
  CheckEquals(1, Outline[2].y, 'wrong outline[2].y');
  CheckEquals(1, Outline[3].x, 'wrong outline[3].x');
  CheckEquals(0, Outline[3].y, 'wrong outline[3].y');
  CheckEquals('Footprint.txt', ExtractFileName(FFootPrintFile.ListingFileName));
  CheckEquals('Output.Txt', ExtractFileName(FFootPrintFile.AsciiFileName));
  CheckEquals('Output.bin', ExtractFileName(FFootPrintFile.BinaryFileName));
  if (FFootPrintFile.NumberOfRows <> 5) or (FFootPrintFile.NumberOfColumns <> 6) then
  begin
    Exit;
  end;
  index := 1;
  for RowIndex := 0 to FFootPrintFile.NumberOfRows - 1 do
  begin
    for ColIndex := 0 to FFootPrintFile.NumberOfColumns - 1 do
    begin
      ErrorMessage := Format('Row: %0:d; Column: %1:d', [RowIndex,ColIndex]);

      CheckEquals(index, FFootPrintFile.DepthRateIndex[RowIndex,ColIndex], 'DepthRateIndex ' + ErrorMessage);
      if (RowIndex = FFootPrintFile.NumberOfRows - 1)
        and (ColIndex = FFootPrintFile.NumberOfColumns - 1) then
      begin
        CheckFalse(FFootPrintFile.Active[RowIndex,ColIndex], 'Active ' + ErrorMessage);
        CheckEquals(0, FFootPrintFile.Withdrawals[RowIndex,ColIndex], 'Withdrawals ' + ErrorMessage);
      end
      else
      begin
        CheckTrue(FFootPrintFile.Active[RowIndex,ColIndex], 'Active ' + ErrorMessage);
        CheckEquals(index+100, FFootPrintFile.Withdrawals[RowIndex,ColIndex], 'Withdrawals ' + ErrorMessage);
      end;
      Inc(index);
    end;
  end;
//  CheckTrue(False, 'Validation has not been set up yet.');
end;

procedure TestTFootPrintFile.TestLoadFromFileBinary;
var
  FileName: string;
  ClosureCriterion: double;
  TestCriterion: double;
  RowIndex: Integer;
  index: Integer;
  ColIndex: Integer;
begin
//  FileName := 'C:\Colab\GWModelTools\Footprint\TestFiles\TestOpen.txt';
//  FileName := ExtractRelativePath(ParamStr(0), FileName);
  FileName := '..\..\..\TestFiles\TestOpenBinary.txt';
  FFootPrintFile.LoadFromFile(FileName);
  // TODO: Validate method results
  CheckEquals(5, FFootPrintFile.NumberOfRows, 'wrong number of rows');
  CheckEquals(6, FFootPrintFile.NumberOfColumns, 'wrong number of rows');
  ClosureCriterion := FFootPrintFile.ClosureCriterion;
  TestCriterion := 0.001;
  CheckEquals(TestCriterion, ClosureCriterion, 'wrong closure criterion');
  CheckEquals(100000, FFootPrintFile.MaxIterations, 'wrong max iterations');
  CheckEquals(False, FFootPrintFile.InitialDistribution, 'wrong initial redistribution');
  CheckEquals(5, FFootPrintFile.RedistributionCriterion, 'wrong Redistribution Criterion');
  if (FFootPrintFile.NumberOfRows <> 5) or (FFootPrintFile.NumberOfColumns <> 6) then
  begin
    Exit;
  end;
  index := 1;
  for RowIndex := 0 to FFootPrintFile.NumberOfRows - 1 do
  begin
    for ColIndex := 0 to FFootPrintFile.NumberOfColumns - 1 do
    begin
      CheckEquals(index, FFootPrintFile.DepthRateIndex[RowIndex,ColIndex]);
      CheckEquals(index+100, FFootPrintFile.Withdrawals[RowIndex,ColIndex]);
      Inc(index);
    end;
  end;
//  CheckTrue(False, 'Validation has not been set up yet.');
end;


procedure TestTFootPrintFile.TestReadAsciiResults;
var
  FileName: string;
begin
  FileName := '..\..\..\TestFiles\TestOpenAscii.txt';
  FFootPrintFile.LoadFromFile(FileName);
  CheckEquals(130, FFootPrintFile.Withdrawals[4,5]);
end;

procedure TestTFootPrintFile.TestReadBinaryIntArray;
var
//  AnArray: TTwoDRealArray;
  FileName: string;
//  Reader: TStreamReader;
  AnIntArray: TTwoDIntArray;
  Reader: TFileStream;
begin
  LoadFootprintIllustration;
  FileName := '..\..\..\TestFiles\FootprintIllustration.fpb';
  Reader := nil;
  try
//    FFootPrintFile.ReadBinaryRealArray(FileName, Reader, AnArray, StrDistributedWithdraw);
    FFootPrintFile.ReadBinaryIntArray(FileName, Reader, AnIntArray, StrFootprintCode);
  finally
    Reader.Free;
  end;
  CheckEquals(40, Length(AnIntArray));
  CheckEquals(40, Length(AnIntArray[0]));
  CheckEquals(1, AnIntArray[0,0]);
  CheckNotEquals(1, AnIntArray[9,14]);
//  CheckTrue(False, 'test not set up yet');
end;

procedure TestTFootPrintFile.LoadFootprintIllustration;
var
  FileName: string;
begin
  FileName := '..\..\..\TestFiles\FootprintIllustration.fpi';
  FFootPrintFile.LoadFromFile(FileName);
end;

procedure TestTFootPrintFile.TestReadBinaryRealArray;
var
  AnArray: TTwoDRealArray;
  FileName: string;
  Reader: TFileStream;
//  AnIntArray: TTwoDIntArray;
begin
  LoadFootprintIllustration;
  FileName := '..\..\..\TestFiles\FootprintIllustration.fpb';
  Reader := nil;
  try
    FFootPrintFile.ReadBinaryRealArray(FileName, Reader, AnArray, StrDistributedWithdraw);
//    FFootPrintFile.ReadBinaryIntArray(FileName, Reader, AnIntArray, StrFootprintCode);
  finally
    Reader.Free;
  end;
  CheckEquals(40, Length(AnArray));
  CheckEquals(40, Length(AnArray[0]));
  CheckEquals(0, AnArray[0,0]);
  CheckNotEquals(0, AnArray[9,14]);
//  CheckTrue(False, 'test not set up yet');
end;

procedure TestTFootPrintFile.TestReadTextIntArray;
var
  AnArray: TTwoDRealArray;
  FileName: string;
  Reader: TStreamReader;
  AnIntArray: TTwoDIntArray;
begin
  LoadFootprintIllustration;
  FileName := '..\..\..\TestFiles\FootprintIllustration.fpt';
  Reader := nil;
  try
    FFootPrintFile.ReadTextRealArray(FileName, Reader, AnArray, StrDistributedWithdraw);
    FFootPrintFile.ReadTextIntArray(FileName, Reader, AnIntArray, StrFootprintCode);
  finally
    Reader.Free;
  end;
  CheckEquals(40, Length(AnIntArray));
  CheckEquals(40, Length(AnIntArray[0]));
  CheckEquals(1, AnIntArray[0,0]);
  CheckNotEquals(1, AnIntArray[9,14]);
//  CheckTrue(False, 'test not set up yet');
end;

procedure TestTFootPrintFile.TestReadTextRealArray;
var
  AnArray: TTwoDRealArray;
  FileName: string;
  Reader: TStreamReader;
begin
  LoadFootprintIllustration;
  FileName := '..\..\..\TestFiles\FootprintIllustration.fpt';
  Reader := nil;
  try
    FFootPrintFile.ReadTextRealArray(FileName, Reader, AnArray, StrDistributedWithdraw);
  finally
    Reader.Free;
  end;
  CheckEquals(40, Length(AnArray));
  CheckEquals(40, Length(AnArray[0]));
  CheckEquals(0, AnArray[0,0]);
  CheckNotEquals(0, AnArray[9,14]);
//  CheckTrue(False, 'test not set up yet');
end;

procedure TestTFootPrintFile.TestSaveToFile;
var
  FileName: string;
  AValue: Integer;
  RowIndex: Integer;
  ColIndex: Integer;
  AFootPrintFile: TFootPrintFile;
  AnOutline: TPolygon2D;
  OutlineIndex: Integer;
  OutlineOriginal: TPolygon2D;
  OutlineNew: TPolygon2D;
  ErrorMessage: string;
begin
  // TODO: Setup method call parameters
  FileName := '..\..\..\TestFiles\TestSave.txt';
  if TFile.Exists(FileName) then
  begin
    TFile.Delete(FileName);
  end;
  FFootPrintFile.NumberOfRows := 5;
  FFootPrintFile.NumberOfColumns := 6;
  FFootPrintFile.GridAngle := 45;
  FFootPrintFile.CellSize := 7;
  SetLength(AnOutline, 4);
  AnOutline[0].x := 0;
  AnOutline[0].y := 0;
  AnOutline[1].x := 0;
  AnOutline[1].y := 1;
  AnOutline[2].x := 1;
  AnOutline[2].y := 1;
  AnOutline[3].x := 1;
  AnOutline[3].y := 0;
  FFootPrintFile.Outline := AnOutline;
  AValue := 1;
  for RowIndex := 0 to FFootPrintFile.NumberOfRows - 1 do
  begin
    for ColIndex := 0 to FFootPrintFile.NumberOfColumns - 1 do
    begin
      FFootPrintFile.DepthRateIndex[RowIndex,ColIndex] := AValue;
      FFootPrintFile.Withdrawals[RowIndex,ColIndex] := 100 + AValue;
      FFootPrintFile.Active[RowIndex,ColIndex] := (RowIndex <> 0) or (ColIndex <> 0);
      Inc(AValue);
    end;
  end;
  FFootPrintFile.ListingFileName := 'Listing.txt';
  FFootPrintFile.AsciiFileName := 'results.txt';
  FFootPrintFile.BinaryFileName := 'results.bin';
  FFootPrintFile.SaveToFile(FileName);
  // TODO: Validate method results
  CheckTrue(TFile.Exists(FileName));
  AFootPrintFile:= TFootPrintFile.Create;
  try
    AFootPrintFile.LoadFromFile(FileName);
    CheckEquals(FFootPrintFile.NumberOfRows, AFootPrintFile.NumberOfRows, 'wrong NumberOfRows');
    CheckEquals(FFootPrintFile.NumberOfColumns, AFootPrintFile.NumberOfColumns, 'wrong NumberOfColumns');
    CheckEquals(FFootPrintFile.ClosureCriterion, AFootPrintFile.ClosureCriterion, 'wrong ClosureCriterion');
    CheckEquals(FFootPrintFile.MaxIterations, AFootPrintFile.MaxIterations, 'wrong MaxIterations');
    CheckEquals(FFootPrintFile.InitialDistribution, AFootPrintFile.InitialDistribution, 'wrong InitialDistribution');
    CheckEquals(FFootPrintFile.RedistributionCriterion, AFootPrintFile.RedistributionCriterion, 'wrong RedistributionCriterion');
    CheckEquals(FFootPrintFile.CellSize, AFootPrintFile.CellSize, 'Cell size wrong');
    CheckEquals(FFootPrintFile.GridAngle, AFootPrintFile.GridAngle, 'grid angle wrong');
    CheckEquals(FFootPrintFile.ListingFileName, AFootPrintFile.ListingFileName);
    CheckEquals(FFootPrintFile.AsciiFileName, AFootPrintFile.AsciiFileName);
    CheckEquals(FFootPrintFile.BinaryFileName, AFootPrintFile.BinaryFileName);
    for RowIndex := 0 to AFootPrintFile.NumberOfRows - 1 do
    begin
      for ColIndex := 0 to AFootPrintFile.NumberOfColumns - 1 do
      begin
        ErrorMessage := Format('Row: %0:d; Column: %1:d', [RowIndex,ColIndex]);
        CheckEquals(FFootPrintFile.DepthRateIndex[RowIndex,ColIndex],
          AFootPrintFile.DepthRateIndex[RowIndex,ColIndex], 'wrong DepthRateIndex '+ErrorMessage);
        if (RowIndex = 0) and (ColIndex = 0) then
        begin
          CheckFalse(AFootPrintFile.Active[RowIndex,ColIndex], 'Wrong active ' + ErrorMessage);
          CheckEquals(0,
            AFootPrintFile.Withdrawals[RowIndex,ColIndex], 'wrong Withdrawals '+ErrorMessage);
        end
        else
        begin
          CheckTrue(AFootPrintFile.Active[RowIndex,ColIndex], 'Wrong active ' +ErrorMessage);
          CheckEquals(FFootPrintFile.Withdrawals[RowIndex,ColIndex],
            AFootPrintFile.Withdrawals[RowIndex,ColIndex], 'wrong Withdrawals '+ErrorMessage);
        end;
      end;
    end;
    OutlineOriginal := FFootPrintFile.Outline;
    OutlineNew := AFootPrintFile.Outline;

    CheckEquals(Length(AnOutline), Length(OutlineOriginal), 'wrong original outline length');
    CheckEquals(Length(AnOutline), Length(OutlineNew), 'wrong new outline length');
    for OutlineIndex := 0 to Length(FFootPrintFile.Outline) - 1 do
    begin
      CheckEquals(FFootPrintFile.Outline[OutlineIndex].x,
        AFootPrintFile.Outline[OutlineIndex].x, 'outline wrong');
      CheckEquals(FFootPrintFile.Outline[OutlineIndex].y,
        AFootPrintFile.Outline[OutlineIndex].y, 'outline wrong');
      CheckEquals(AnOutline[OutlineIndex].x,
        AFootPrintFile.Outline[OutlineIndex].x, 'outline wrong');
      CheckEquals(AnOutline[OutlineIndex].y,
        AFootPrintFile.Outline[OutlineIndex].y, 'outline wrong');
    end;
  finally
    AFootPrintFile.Free;
  end;
//  CheckTrue(False, 'Validation has not been set up yet.');
end;

procedure TestTFootPrintFile.LoadConvertError;
var
  FileName: string;
begin
  FileName := '..\..\..\TestFiles\BadNumber.txt';
  FFootPrintFile.LoadFromFile(FileName);
end;

//procedure TestTFootPrintFile.LoadMissingStartTag;
//var
//  FileName: string;
//begin
//  FileName := '..\..\..\TestFiles\BadStartTag.txt';
//  FFootPrintFile.LoadFromFile(FileName);
//end;

//procedure TestTFootPrintFile.LoadMissingTerminator;
//var
//  FileName: string;
//begin
//  FileName := '..\..\..\TestFiles\TagTerminatorMissing.txt';
//  FFootPrintFile.LoadFromFile(FileName);
//end;

//procedure TestTFootPrintFile.LoadMissingVersion;
//var
//  FileName: string;
//begin
//  FileName := '..\..\..\TestFiles\MissingVersion.txt';
//  FFootPrintFile.LoadFromFile(FileName);
//end;

//procedure TestTFootPrintFile.LoadUnrecognizedTag;
//var
//  FileName: string;
//begin
//  FileName := '..\..\..\TestFiles\UnrecognizedTag.txt';
//  FFootPrintFile.LoadFromFile(FileName);
//end;

procedure TestTFootPrintFile.LoadWrongHeader;
var
  FileName: string;
begin
  FileName := '..\..\..\TestFiles\TestHeaderWrong.txt';
  FFootPrintFile.LoadFromFile(FileName);
end;

procedure TestTFootPrintFile.TestWithdrawalsArray;
var
  AnArray: TTwoDRealArray;
begin
  FFootPrintFile.NumberOfRows := 1;
  FFootPrintFile.NumberOfColumns := 1;
  FFootPrintFile.Withdrawals[0,0] := 5;
  AnArray := FFootPrintFile.WithdrawalsArray;
  CheckEquals(1, Length(AnArray));
  CheckEquals(1, Length(AnArray[0]));
  CheckEquals(5, AnArray[0,0]);
  AnArray[0,0] := 1;
  CheckEquals(5, FFootPrintFile.Withdrawals[0,0]);
end;

procedure TestTFootPrintFile.TestWrongHeader;
begin
  CheckException(LoadWrongHeader, EFootPrintHeaderError, 'Failed to detect missing header');
end;


procedure TestTFootPrintFile.TestWrongNumberOfColumns;
begin
  CheckException(LoadWrongNumberOfColumns, EFootPrintColumnCountError, 'Failed to wrong number of columns');
end;

procedure TestTFootPrintFile.TestWrongNumberOfRows;
begin
  CheckException(LoadWrongNumberOfRows, EFootPrintRowCountError, 'Failed to wrong number of rows');
end;

procedure TestTFootPrintFile.LoadWrongNumberOfRows;
var
  FileName: string;
begin
  FileName := '..\..\..\TestFiles\NumberOfRowsWrong.txt';
  FFootPrintFile.LoadFromFile(FileName);
end;

procedure TestTFootPrintFile.LoadWrongNumberOfColumns;
var
  FileName: string;
begin
  FileName := '..\..\..\TestFiles\NumberOfColumnsWrong.txt';
  FFootPrintFile.LoadFromFile(FileName);
end;

procedure TestTFootPrintFile.LoadWrongVersion;
var
  FileName: string;
begin
  FileName := '..\..\..\TestFiles\TestWrongVersion.txt';
  FFootPrintFile.LoadFromFile(FileName);
end;

procedure TestTFootPrintFile.ReadBadArrayIndex;
begin
  FFootPrintFile.NumberOfRows := 5;
  FFootPrintFile.NumberOfColumns := 6;
  FFootPrintFile.DepthRateIndex[5,6];
end;

procedure TestTFootPrintFile.TestWrongVersion;
begin
  CheckException(LoadWrongVersion, EFootPrintWrongVersion, 'Failed to detect wrong version');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFootPrintFile.Suite);
end.

